2022-11-21 19:59:13 - INFO - Training/evaluation parameters: Namespace(adam_eps=1e-06, adam_lr=5e-05, base_url='../data/tnews_public/', bert_cache='../config/hfl/chinese-roberta-wwm-ext', bert_dim=768, bert_dir='hfl/chinese-roberta-wwm-ext', bert_max_length=512, bert_padding='max_length', best_score=0.5, ckpt_file='save/BD/v13/model_.bin', data_path='../data/Toursim12.csv', device='cuda', dropout=0.1, log_file='log/BD/v13.log', lstm_batch_first=True, lstm_bidirectional=True, lstm_dropout=0.0, lstm_hidden_size=256, lstm_input_size=768, lstm_num_layers=2, lstm_reflector_size=256, max_epochs=10, max_steps=50000, n_gpu=1, num_class=2, num_workers=6, prefetch=12, print_steps=10, savedmodel_path='save/BD/v13', seed=2021, smoothing=0.0, stopWords='../stopword/hit_stopwords.txt', train_batch_size=24, val_batch_size=24, val_ratio=0.2, warmup_steps=200, weight_decay=0.001, word2Vec='../word2vec/sgns.weibo.bigram-char.bz2', word2Vec_dim=300)
Some weights of the model checkpoint at hfl/chinese-roberta-wwm-ext were not used when initializing BertModel: ['cls.predictions.transform.dense.bias', 'cls.predictions.bias', 'cls.seq_relationship.weight', 'cls.predictions.transform.LayerNorm.bias', 'cls.predictions.transform.LayerNorm.weight', 'cls.seq_relationship.bias', 'cls.predictions.transform.dense.weight', 'cls.predictions.decoder.weight']
- This IS expected if you are initializing BertModel from the checkpoint of a model trained on another task or with another architecture (e.g. initializing a BertForSequenceClassification model from a BertForPreTraining model).
- This IS NOT expected if you are initializing BertModel from the checkpoint of a model that you expect to be exactly identical (initializing a BertForSequenceClassification model from a BertForSequenceClassification model).
2022-11-21 20:01:24 - INFO - Epoch 0 step 212: loss 0.375, {'accuracy': 0.8386, 'f1': 0.7852, 'precision': 0.8138, 'recall': 0.7677}
2022-11-21 20:03:29 - INFO - Epoch 1 step 424: loss 0.374, {'accuracy': 0.8519, 'f1': 0.8107, 'precision': 0.822, 'recall': 0.8016}
2022-11-21 20:05:33 - INFO - Epoch 2 step 636: loss 0.422, {'accuracy': 0.8409, 'f1': 0.7877, 'precision': 0.8182, 'recall': 0.7693}
2022-11-21 20:07:38 - INFO - Epoch 3 step 848: loss 0.511, {'accuracy': 0.8401, 'f1': 0.7955, 'precision': 0.8067, 'recall': 0.7867}
2022-11-21 20:09:43 - INFO - Epoch 4 step 1060: loss 0.598, {'accuracy': 0.8448, 'f1': 0.7996, 'precision': 0.8149, 'recall': 0.7882}
2022-11-21 20:11:47 - INFO - Epoch 5 step 1272: loss 0.614, {'accuracy': 0.8378, 'f1': 0.7911, 'precision': 0.8048, 'recall': 0.7808}
2022-11-21 20:13:52 - INFO - Epoch 6 step 1484: loss 0.782, {'accuracy': 0.8182, 'f1': 0.7861, 'precision': 0.7756, 'recall': 0.8029}
2022-11-21 20:15:57 - INFO - Epoch 7 step 1696: loss 0.881, {'accuracy': 0.8362, 'f1': 0.7948, 'precision': 0.7984, 'recall': 0.7916}
2022-11-21 20:18:02 - INFO - Epoch 8 step 1908: loss 0.925, {'accuracy': 0.844, 'f1': 0.7973, 'precision': 0.8154, 'recall': 0.7843}
Traceback (most recent call last):
  File "main.py", line 99, in <module>
    main()
  File "main.py", line 96, in main
    train_and_validate(args)
  File "main.py", line 58, in train_and_validate
    optimizer.step()
  File "/home/lenovo/anaconda3/envs/tfNLP/lib/python3.8/site-packages/torch/optim/lr_scheduler.py", line 65, in wrapper
    return wrapped(*args, **kwargs)
  File "/home/lenovo/anaconda3/envs/tfNLP/lib/python3.8/site-packages/torch/optim/optimizer.py", line 109, in wrapper
    return func(*args, **kwargs)
  File "/home/lenovo/anaconda3/envs/tfNLP/lib/python3.8/site-packages/torch/autograd/grad_mode.py", line 27, in decorate_context
    return func(*args, **kwargs)
  File "/home/lenovo/anaconda3/envs/tfNLP/lib/python3.8/site-packages/torch/optim/adamw.py", line 161, in step
    adamw(params_with_grad,
  File "/home/lenovo/anaconda3/envs/tfNLP/lib/python3.8/site-packages/torch/optim/adamw.py", line 218, in adamw
    func(params,
  File "/home/lenovo/anaconda3/envs/tfNLP/lib/python3.8/site-packages/torch/optim/adamw.py", line 268, in _single_tensor_adamw
    exp_avg.mul_(beta1).add_(grad, alpha=1 - beta1)
KeyboardInterrupt
