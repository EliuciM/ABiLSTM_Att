2022-09-10 12:07:15 - INFO - Training/evaluation parameters: Namespace(adam_eps=1e-06, adam_lr=5e-05, base_url='../data/tnews_public/', bert_cache='../config/mengzi-bert-base', bert_dim=768, bert_dir='Langboat/mengzi-bert-base', bert_max_length=512, bert_padding='max_length', best_score=0.5, ckpt_file='save/BD/v13/model_.bin', data_path='../data/Toursim3.csv', device='cuda', dropout=0.1, log_file='log/BD/v13.log', lstm_batch_first=True, lstm_bidirectional=True, lstm_dropout=0.0, lstm_hidden_size=768, lstm_input_size=768, lstm_num_layers=2, lstm_reflector_size=256, max_epochs=10, max_steps=50000, n_gpu=1, num_class=3, num_workers=6, prefetch=12, print_steps=10, savedmodel_path='save/BD/v13', seed=2021, smoothing=0.0, stopWords='../stopword/hit_stopwords.txt', train_batch_size=24, val_batch_size=24, val_ratio=0.2, warmup_steps=1000, weight_decay=0.001, word2Vec='../word2vec/sgns.weibo.bigram-char.bz2', word2Vec_dim=300)
Some weights of the model checkpoint at Langboat/mengzi-bert-base were not used when initializing BertModel: ['cls.predictions.bias', 'cls.predictions.decoder.weight', 'sop.cls.bias', 'sop.cls.weight', 'cls.predictions.transform.dense.weight', 'cls.predictions.transform.LayerNorm.bias', 'cls.predictions.transform.LayerNorm.weight', 'cls.predictions.transform.dense.bias', 'cls.predictions.decoder.bias']
- This IS expected if you are initializing BertModel from the checkpoint of a model trained on another task or with another architecture (e.g. initializing a BertForSequenceClassification model from a BertForPreTraining model).
- This IS NOT expected if you are initializing BertModel from the checkpoint of a model that you expect to be exactly identical (initializing a BertForSequenceClassification model from a BertForSequenceClassification model).
2022-09-10 12:10:20 - INFO - Epoch 0 step 232: loss 0.462, {'accuracy': 0.8135, 'f1': 0.8109, 'precision': 0.8092, 'recall': 0.8135}
2022-09-10 12:13:13 - INFO - Epoch 1 step 464: loss 0.448, {'accuracy': 0.8286, 'f1': 0.8141, 'precision': 0.8225, 'recall': 0.8286}
2022-09-10 12:16:05 - INFO - Epoch 2 step 696: loss 0.481, {'accuracy': 0.8156, 'f1': 0.8026, 'precision': 0.8058, 'recall': 0.8156}
2022-09-10 12:18:57 - INFO - Epoch 3 step 928: loss 0.542, {'accuracy': 0.8214, 'f1': 0.8138, 'precision': 0.8134, 'recall': 0.8214}
2022-09-10 12:21:50 - INFO - Epoch 4 step 1160: loss 0.660, {'accuracy': 0.8063, 'f1': 0.8037, 'precision': 0.8023, 'recall': 0.8063}
2022-09-10 12:24:42 - INFO - Epoch 5 step 1392: loss 0.721, {'accuracy': 0.8113, 'f1': 0.8076, 'precision': 0.8079, 'recall': 0.8113}
2022-09-10 12:27:35 - INFO - Epoch 6 step 1624: loss 0.801, {'accuracy': 0.8099, 'f1': 0.7989, 'precision': 0.7987, 'recall': 0.8099}
2022-09-10 12:30:27 - INFO - Epoch 7 step 1856: loss 0.937, {'accuracy': 0.8113, 'f1': 0.8029, 'precision': 0.8014, 'recall': 0.8113}
2022-09-10 12:33:20 - INFO - Epoch 8 step 2088: loss 1.001, {'accuracy': 0.8135, 'f1': 0.807, 'precision': 0.8054, 'recall': 0.8135}
Traceback (most recent call last):
  File "main.py", line 100, in <module>
    main()
  File "main.py", line 97, in main
    train_and_validate(args)
  File "main.py", line 55, in train_and_validate
    loss, accuracy, _, _, _ = model(batch)
  File "/home/lenovo/anaconda3/envs/tfNLP/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1130, in _call_impl
    return forward_call(*input, **kwargs)
  File "/home/lenovo/anaconda3/envs/tfNLP/lib/python3.8/site-packages/torch/nn/parallel/data_parallel.py", line 166, in forward
    return self.module(*inputs[0], **kwargs[0])
  File "/home/lenovo/anaconda3/envs/tfNLP/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1130, in _call_impl
    return forward_call(*input, **kwargs)
  File "/home/lenovo/wcProject/Bert_ABiLSTM_Att/Code_9.2/model.py", line 577, in forward
    output, (final_hidden_state, _) = self.bilstm(last_hidden_state)
  File "/home/lenovo/anaconda3/envs/tfNLP/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1130, in _call_impl
    return forward_call(*input, **kwargs)
  File "/home/lenovo/anaconda3/envs/tfNLP/lib/python3.8/site-packages/torch/nn/modules/rnn.py", line 769, in forward
    result = _VF.lstm(input, hx, self._flat_weights, self.bias, self.num_layers,
KeyboardInterrupt
