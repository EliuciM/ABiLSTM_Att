2022-10-18 23:36:36 - INFO - Training/evaluation parameters: Namespace(adam_eps=1e-06, adam_lr=5e-05, base_url='../data/tnews_public/', bert_cache='../config/ernie-3.0-medium-zh', bert_dim=768, bert_dir='nghuyong/ernie-3.0-medium-zh', bert_max_length=512, bert_padding='max_length', best_score=0.5, ckpt_file='save/BD/v13/model_.bin', data_path='../data/Toursim3.csv', device='cuda', dropout=0.1, log_file='log/BD/v13.log', lstm_batch_first=True, lstm_bidirectional=True, lstm_dropout=0.0, lstm_hidden_size=256, lstm_input_size=768, lstm_num_layers=2, lstm_reflector_size=256, max_epochs=10, max_steps=50000, n_gpu=1, num_class=3, num_workers=6, prefetch=12, print_steps=10, savedmodel_path='save/BD/v13', seed=2021, smoothing=0.0, stopWords='../stopword/hit_stopwords.txt', train_batch_size=16, val_batch_size=16, val_ratio=0.2, warmup_steps=1000, weight_decay=0.001, word2Vec='../word2vec/sgns.weibo.bigram-char.bz2', word2Vec_dim=300)
Some weights of ErnieModel were not initialized from the model checkpoint at nghuyong/ernie-3.0-medium-zh and are newly initialized: ['ernie.pooler.dense.weight', 'ernie.pooler.dense.bias']
You should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.
2022-10-18 23:39:12 - INFO - Epoch 0 step 348: loss 0.439, {'accuracy': 0.8121, 'f1': 0.8009, 'precision': 0.8104, 'recall': 0.8121}
2022-10-18 23:40:26 - INFO - Epoch 1 step 696: loss 0.448, {'accuracy': 0.8113, 'f1': 0.8156, 'precision': 0.8228, 'recall': 0.8113}
2022-10-18 23:41:39 - INFO - Epoch 2 step 1044: loss 0.443, {'accuracy': 0.8214, 'f1': 0.8227, 'precision': 0.8246, 'recall': 0.8214}
2022-10-18 23:42:51 - INFO - Epoch 3 step 1392: loss 0.525, {'accuracy': 0.8042, 'f1': 0.806, 'precision': 0.8086, 'recall': 0.8042}
2022-10-18 23:44:05 - INFO - Epoch 4 step 1740: loss 0.556, {'accuracy': 0.8027, 'f1': 0.8018, 'precision': 0.801, 'recall': 0.8027}
Traceback (most recent call last):
  File "main.py", line 99, in <module>
    main()
  File "main.py", line 96, in main
    train_and_validate(args)
  File "main.py", line 57, in train_and_validate
    loss.backward()
  File "/home/lenovo/anaconda3/envs/tfNLP/lib/python3.8/site-packages/torch/_tensor.py", line 396, in backward
    torch.autograd.backward(self, gradient, retain_graph, create_graph, inputs=inputs)
  File "/home/lenovo/anaconda3/envs/tfNLP/lib/python3.8/site-packages/torch/autograd/__init__.py", line 173, in backward
    Variable._execution_engine.run_backward(  # Calls into the C++ engine to run the backward pass
KeyboardInterrupt
