2022-09-16 00:44:29 - INFO - Training/evaluation parameters: Namespace(adam_eps=1e-06, adam_lr=5e-05, base_url='../data/tnews_public/', bert_cache='../config/mengzi-bert-base', bert_dim=768, bert_dir='Langboat/mengzi-bert-base', bert_max_length=512, bert_padding='max_length', best_score=0.5, ckpt_file='save/BD/v13/model_.bin', data_path='../data/Toursim3.csv', device='cuda', dropout=0.1, log_file='log/BD/v13.log', lstm_batch_first=True, lstm_bidirectional=True, lstm_dropout=0.0, lstm_hidden_size=768, lstm_input_size=768, lstm_num_layers=2, lstm_reflector_size=256, max_epochs=10, max_steps=50000, n_gpu=1, num_class=3, num_workers=6, prefetch=12, print_steps=10, savedmodel_path='save/BD/v13', seed=2021, smoothing=0.0, stopWords='../stopword/hit_stopwords.txt', train_batch_size=12, val_batch_size=12, val_ratio=0.2, warmup_steps=1000, weight_decay=0.001, word2Vec='../word2vec/sgns.weibo.bigram-char.bz2', word2Vec_dim=300)
Some weights of the model checkpoint at Langboat/mengzi-bert-base were not used when initializing BertModel: ['cls.predictions.decoder.weight', 'sop.cls.bias', 'cls.predictions.bias', 'cls.predictions.transform.dense.weight', 'cls.predictions.transform.dense.bias', 'cls.predictions.decoder.bias', 'sop.cls.weight', 'cls.predictions.transform.LayerNorm.bias', 'cls.predictions.transform.LayerNorm.weight']
- This IS expected if you are initializing BertModel from the checkpoint of a model trained on another task or with another architecture (e.g. initializing a BertForSequenceClassification model from a BertForPreTraining model).
- This IS NOT expected if you are initializing BertModel from the checkpoint of a model that you expect to be exactly identical (initializing a BertForSequenceClassification model from a BertForSequenceClassification model).
2022-09-16 00:51:11 - INFO - Epoch 0 step 464: loss 0.477, {'accuracy': 0.7891, 'f1': 0.7974, 'precision': 0.8169, 'recall': 0.7891}
2022-09-16 00:57:23 - INFO - Epoch 1 step 928: loss 0.460, {'accuracy': 0.8185, 'f1': 0.8044, 'precision': 0.8087, 'recall': 0.8185}
2022-09-16 01:03:35 - INFO - Epoch 2 step 1392: loss 0.470, {'accuracy': 0.8092, 'f1': 0.8074, 'precision': 0.8127, 'recall': 0.8092}
2022-09-16 01:09:48 - INFO - Epoch 3 step 1856: loss 0.507, {'accuracy': 0.825, 'f1': 0.8204, 'precision': 0.8189, 'recall': 0.825}
2022-09-16 01:15:59 - INFO - Epoch 4 step 2320: loss 0.663, {'accuracy': 0.8085, 'f1': 0.7983, 'precision': 0.7971, 'recall': 0.8085}
2022-09-16 01:22:12 - INFO - Epoch 5 step 2784: loss 0.657, {'accuracy': 0.8128, 'f1': 0.8038, 'precision': 0.8026, 'recall': 0.8128}
Traceback (most recent call last):
  File "main.py", line 100, in <module>
    main()
  File "main.py", line 97, in main
    train_and_validate(args)
  File "main.py", line 58, in train_and_validate
    loss.backward()
  File "/home/lenovo/anaconda3/envs/tfNLP/lib/python3.8/site-packages/torch/_tensor.py", line 396, in backward
    torch.autograd.backward(self, gradient, retain_graph, create_graph, inputs=inputs)
  File "/home/lenovo/anaconda3/envs/tfNLP/lib/python3.8/site-packages/torch/autograd/__init__.py", line 173, in backward
    Variable._execution_engine.run_backward(  # Calls into the C++ engine to run the backward pass
KeyboardInterrupt
